// qoauth1.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_10_0 -)

class QOAuth1 : QAbstractOAuth
{
%TypeHeaderCode
#include <qoauth1.h>
%End

public:
    enum class SignatureMethod
    {
        Hmac_Sha1,
        Rsa_Sha1,
        PlainText,
    };

    explicit QOAuth1(QObject *parent /TransferThis/ = 0);
    QOAuth1(QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    QOAuth1(const QString &clientIdentifier, const QString &clientSharedSecret, QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    QString clientSharedSecret() const;
    void setClientSharedSecret(const QString &clientSharedSecret);
    QPair<QString, QString> clientCredentials() const;
    void setClientCredentials(const QPair<QString, QString> &clientCredentials);
    void setClientCredentials(const QString &clientIdentifier, const QString &clientSharedSecret);
    QString tokenSecret() const;
    void setTokenSecret(const QString &tokenSecret);
    QPair<QString, QString> tokenCredentials() const;
    void setTokenCredentials(const QPair<QString, QString> &tokenCredentials);
    void setTokenCredentials(const QString &token, const QString &tokenSecret);
    QUrl temporaryCredentialsUrl() const;
    void setTemporaryCredentialsUrl(const QUrl &url);
    QUrl tokenCredentialsUrl() const;
    void setTokenCredentialsUrl(const QUrl &url);
    QOAuth1::SignatureMethod signatureMethod() const;
    void setSignatureMethod(QOAuth1::SignatureMethod value);
    virtual QNetworkReply *head(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *get(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *post(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *put(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *deleteResource(const QUrl &url, const QVariantMap &parameters = QVariantMap());

public slots:
    virtual void grant();
    void continueGrantWithVerifier(const QString &verifier);

signals:
    void signatureMethodChanged(QOAuth1::SignatureMethod method);
    void clientSharedSecretChanged(const QString &credential);
    void tokenSecretChanged(const QString &token);
    void temporaryCredentialsUrlChanged(const QUrl &url);
    void tokenCredentialsUrlChanged(const QUrl &url);

protected:
    QNetworkReply *requestTemporaryCredentials(QNetworkAccessManager::Operation operation, const QUrl &url, const QVariantMap &parameters = QVariantMap());
    QNetworkReply *requestTokenCredentials(QNetworkAccessManager::Operation operation, const QUrl &url, const QPair<QString, QString> &temporaryToken, const QVariantMap &parameters = QVariantMap());
    void setup(QNetworkRequest *request, const QVariantMap &signingParameters, QNetworkAccessManager::Operation operation);
    static QByteArray nonce();
    static QByteArray generateAuthorizationHeader(const QVariantMap &oauthParams);
%If (Qt_5_13_0 -)
    void setup(QNetworkRequest *request, const QVariantMap &signingParameters, const QByteArray &operationVerb);
%End
};

%End

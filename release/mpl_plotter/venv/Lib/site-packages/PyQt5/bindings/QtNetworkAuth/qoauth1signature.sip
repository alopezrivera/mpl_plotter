// qoauth1signature.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_10_0 -)

class QOAuth1Signature
{
%TypeHeaderCode
#include <qoauth1signature.h>
%End

public:
    enum class HttpRequestMethod
    {
        Head,
        Get,
        Put,
        Post,
        Delete,
        Custom,
        Unknown,
    };

    QOAuth1Signature(const QUrl &url = QUrl(), QOAuth1Signature::HttpRequestMethod method = QOAuth1Signature::HttpRequestMethod::Post, const QVariantMap &parameters = QVariantMap());
    QOAuth1Signature(const QUrl &url, const QString &clientSharedKey, const QString &tokenSecret, QOAuth1Signature::HttpRequestMethod method = QOAuth1Signature::HttpRequestMethod::Post, const QVariantMap &parameters = QVariantMap());
    QOAuth1Signature(const QOAuth1Signature &other);
    ~QOAuth1Signature();
    QOAuth1Signature::HttpRequestMethod httpRequestMethod() const;
    void setHttpRequestMethod(QOAuth1Signature::HttpRequestMethod method);
    QUrl url() const;
    void setUrl(const QUrl &url);
    QVariantMap parameters() const;
    void setParameters(const QVariantMap &parameters);
    void addRequestBody(const QUrlQuery &body);
    void insert(const QString &key, const QVariant &value);
    QList<QString> keys() const;
    QVariant take(const QString &key);
    QVariant value(const QString &key, const QVariant &defaultValue = QVariant()) const;
    QString clientSharedKey() const;
    void setClientSharedKey(const QString &secret);
    QString tokenSecret() const;
    void setTokenSecret(const QString &secret);
    QByteArray hmacSha1() const;
    QByteArray rsaSha1() const;
    QByteArray plainText() const;
    static QByteArray plainText(const QString &clientSharedSecret, const QString &tokenSecret);
    void swap(QOAuth1Signature &other /Constrained/);
%If (Qt_5_13_0 -)
    QByteArray customMethodString() const;
%End
%If (Qt_5_13_0 -)
    void setCustomMethodString(const QByteArray &verb);
%End
};

%End
